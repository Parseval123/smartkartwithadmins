# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'factory_girl'

RSpec.configure do |config|

  
  config.include FactoryGirl::Syntax::Methods
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  
  config.before(:each) do
      
      Geocoder.configure(:lookup => :test)

      Geocoder::Lookup::Test.add_stub(
        "via alessandro severo, 71, 00145 Roma RM", [
          {
            'latitude'     => 41.8552904,
            'longitude'    => 12.4827564,
            'address'      => 'Via Alessandro Severo, 71, 00145 Roma RM',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "via alessandro severo .roma ,italia", [
          {
            'latitude'     => 41.8552904,
            'longitude'    => 12.4827564,
            'address'      => 'Via Alessandro Severo, 71, 00145 Roma RM',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "via alessandro manzoni, 31, 03031 Aquino FR", [
          {
            'latitude'     => 41.4985215,
            'longitude'    => 13.7050184,
            'address'      => 'via alessandro manzoni, 31, 03031 Aquino FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "via risorgimento, 4, 03030 Piedimonte San Germano FR", [
          {
            'latitude'     => 41.496175,
            'longitude'    => 13.749178,
            'address'      => 'via risorgimento, 4, 03030 Piedimonte San Germano FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "corso achille spatuzzi, 1, 03047 San Giorgio A Liri FR", [
          {
            'latitude'     => 41.4075891,
            'longitude'    => 13.765525,
            'address'      => 'corso achille spatuzzi, snc, 03047 San Giorgio A Liri FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "strada statale casilina, 1, 03030 Piedimonte San Germano FR", [
          {
            'latitude'     => 41.492449,
            'longitude'    =>  13.761081,
            'address'      => 'strada statale casilina, 03030 Piedimonte San Germano FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "via melfi urbana, 1, 03037 Pontecorvo FR", [
          {
            'latitude'     => 41.4635807,
            'longitude'    => 13.6649785,
            'address'      => 'via melfi urbana, 1, 03037 Pontecorvo FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )
	Geocoder::Lookup::Test.add_stub(
        "via saudoni, 42, 03030 Castrocielo FR", [
          {
            'latitude'     => 41.4729934,
            'longitude'    => 13.6842442,
            'address'      => 'via saudoni, 42, 03030 Castrocielo FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

Geocoder::Lookup::Test.add_stub(
        "via unicorni celesti, 31, 03031 Aquino FR", [
          {
            'latitude'     => nil,
            'longitude'    => nil,
            'address'      => 'via unicorni celesti, 31, 03031 Aquino FR',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )	
	
	Geocoder::Lookup::Test.add_stub(
        "via paolo paruta .roma .italia", [
          {
            'latitude'     => 41.8552904,
            'longitude'    => 12.4827564,
            'address'      => 'Via Alessandro Severo, 71, 00145 Roma RM',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )	

	Geocoder::Lookup::Test.add_stub(
        "Via Appia Nuova, 472, 00181 Roma RM", [
          {
            'latitude'     => 41.874062,
            'longitude'    => 12.523678,
            'address'      => 'Via Appia Nuova, 472, 00181 Roma RM',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )

	Geocoder::Lookup::Test.add_stub(
        "Viale Leonardo da Vinci, 111, 00145 Roma RM", [
          {
            'latitude'     => 41.8557836,
            'longitude'    => 12.4809807,
            'address'      => 'Viale Leonardo da Vinci, 111, 00145 Roma RM',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )	

	Geocoder::Lookup::Test.add_stub(
        "Via di Boccea, 45, 00165 Roma RM", [
          {
            'latitude'     => 41.8999586,
            'longitude'    => 12.4284989,
            'address'      => 'Via di Boccea, 45, 00165 Roma RM',
            'state'        => '',
            'state_code'   => '',
            'country'      => 'Italy',
            'country_code' => 'IT'
          }
        ]
      )	

end

  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
